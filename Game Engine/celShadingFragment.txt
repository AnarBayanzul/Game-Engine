// Implements Blinn-Phong Lighting


#version 410
smooth in vec3 normal;
out vec4 color;

in vec3 worldPos;

void main() {
	// Colors
	vec4 matColor = vec4(0.3f, 0.5f, 0.5f, 1.0f);
	vec3 lightColor = vec3(1.0f, 1.0f, 1.0f);
	vec3 lightDir = vec3(-0.707f, 0.0f, -0.707f);
	vec3 cameraPos = vec3(0.0f, 0.0f, -2.5f);
	vec3 FragPos = vec3(0.0f, 0.0f, -2.5f);

	// Ambient Light
	float ambientI = 0.1f;
	vec3 ambient = ambientI * lightColor;


	// Diffuse
	float diffuseI = - dot(lightDir, normal);
	diffuseI = max(diffuseI, 0.0f); // negative values become 0
	vec3 diffuse = diffuseI * lightColor;
	
	
	// Specular
	int specPower = 4;
	float specularI = 1.0f;
	vec3 viewV = normalize(cameraPos - worldPos);
	vec3 reflectV = reflect(-lightDir, normal);
	float spec = pow(max(dot(viewV, reflectV), 0.0f), specPower);
	vec3 specular = specularI * spec * lightColor;
	
	color = vec4(ambient + diffuse + specular, 1.0f) * matColor;
}
#version 410
layout(location = 0) in vec3 pos;
layout(location = 1) in vec3 norm;
layout(location = 2) in vec2 texCoord;

layout(location = 3) in ivec4 boneID;
layout(location = 4) in vec4 boneWeights;

#define BONECOUNT 19

uniform mat4 bones[BONECOUNT];

uniform mat4 proj;
uniform mat4 tran;
smooth out vec3 n;
smooth out vec2 uvCoord;

out vec3 worldPos;

bool isZeroMatrix(mat4 m) {
    return all(equal(m[0], vec4(0.0))) && 
           all(equal(m[1], vec4(0.0))) && 
           all(equal(m[2], vec4(0.0))) && 
           all(equal(m[3], vec4(0.0)));
}

void main() {
	n = (tran * vec4(norm.xyz, 0.0)).xyz;

	uvCoord = vec2(texCoord.x,  1 - texCoord.y);


	if (isZeroMatrix(bones[0])) {
		worldPos = (tran * vec4(pos, 1.0f)).xyz;
		gl_Position = proj * tran * vec4(pos, 1.0);
	} else {
		
		vec4 armPos = vec4(0.0, 0.0, 0.0, 1.0);
		armPos = vec4(pos, 1.0);

		for (int i = 0; i < 4; ++i) {
			//armPos = (bones[int(boneID[i])] * vec4(pos, 1.0f)) * 0.25 + armPos;
			armPos = (bones[int(boneID[i]) + 1] * vec4(pos, 1.0f)) * boneWeights[i] + armPos;
			//armPos = (bones[17] * vec4(pos, 1.0f)) * boneWeights[i] + armPos;

		}

		gl_Position = proj * tran  * armPos;
		
		worldPos = (tran * vec4(armPos.xyz, 1.0)).xyz;
		//gl_Position = proj * tran * vec4(pos.xyz, 1.0f);
	}
}
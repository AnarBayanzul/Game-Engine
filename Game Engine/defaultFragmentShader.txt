// Implements Blinn-Phong Lighting


#version 410
smooth in vec3 n;
uniform vec4 baseColor;

smooth in vec3 worldPos;

in vec2 uvCoord;
uniform sampler2D tex;


//out vec4 color;

// frame buffer deferred lighting
layout (location = 0) out vec3 diffuse;
layout (location = 1) out vec3 normal;
layout (location = 2) out vec3 position;



void main() {
	// Colors
	vec3 lightColor = vec3(1.0f, 1.0f, 1.0f);
	//vec3 lightColor = abs(n);
	vec3 lightDir = vec3(-0.707f, 0.0f, -0.707f);
	vec3 cameraPos = vec3(0.0f, 0.0f, -2.5f);						// TODO WAAYYYYYY OUTDATED
	vec3 FragPos = vec3(0.0f, 0.0f, -2.5f);
	//vec4 base = baseColor;

	// Texture
	vec4 base = texture(tex, uvCoord);

	// Ambient Light
	float ambientI = 0.1f;
	vec3 ambient = ambientI * lightColor;


	// Diffuse
	float diffuseI = - dot(lightDir, n);
	diffuseI = max(diffuseI, 0.0f); // negative values become 0
	vec3 diffuseTotal = diffuseI * lightColor;
	
	
	// Specular
	int specPower = 10000; // recommended 4
	float specularI = 1.0f;
	vec3 viewV = normalize(cameraPos - worldPos);
	vec3 reflectV = reflect(-lightDir, n);
	float spec = pow(max(dot(viewV, reflectV), 0.0f), specPower);
	vec3 specular = specularI * spec * lightColor;
	
	//color = vec4(base.xyz, 1.0f);
	//color = base;
	//color = vec4(n, 1.0);




	diffuse = (vec4(ambient + diffuseTotal + specular, 1.0f) * base).xyz;
	//diffuse = base.xyz;
	//diffuse = n;
	normal = n;
	position = worldPos;
}